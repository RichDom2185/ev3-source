/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,2],$V1=[1,18],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,30],$V6=[1,31],$V7=[1,15],$V8=[1,32],$V9=[1,16],$Va=[1,17],$Vb=[1,22],$Vc=[1,21],$Vd=[1,23],$Ve=[1,28],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,40],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,41],$Vq=[1,20],$Vr=[5,75],$Vs=[5,8,20,21,22,25,26,27,28,31,32,35,36,40,51,58,59,60,61,62,63,65,66,67,68,73,74,75],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[1,64],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[18,24,29,35,36,37,38,39,41,42,43,44,45,46,47,48,51,52,56,57,70],$VK=[1,84],$VL=[1,83],$VM=[2,70],$VN=[2,76],$VO=[1,97],$VP=[18,24,29,35,36,37,38,39,41,42,43,44,45,46,47,48,52,56,57,70],$VQ=[18,24,29,52,57,70],$VR=[29,52],$VS=[2,78],$VT=[1,129],$VU=[18,24,29,35,36,41,42,43,44,45,46,47,48,52,56,57,70],$VV=[18,24,29,41,42,43,44,52,56,57,70],$VW=[18,24,29,41,42,43,44,45,46,47,48,52,56,57,70],$VX=[28,35,36,40,51,58,59,60,61,62,63,65,66,67,68,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,"functionid":7,"function":8,"identifier":9,"ifstatement":10,"whilestatement":11,"forstatement":12,"wrappedparams":13,"leftbrace":14,"rightbrace":15,"declaration":16,"assignment":17,";":18,"expression":19,"return":20,"break":21,"continue":22,"declarator":23,"=":24,"const":25,"let":26,"if":27,"(":28,")":29,"else":30,"while":31,"for":32,"forinitialiser":33,"forfinaliser":34,"+":35,"-":36,"*":37,"/":38,"%":39,"!":40,"&&":41,"||":42,"===":43,"!==":44,">":45,"<":46,">=":47,"<=":48,"=>":49,"idarrow":50,"[":51,"]":52,"constants":53,"expressions":54,"wrappedexpressions":55,"?":56,":":57,"FLOAT_NUMBER":58,"INT_NUMBER":59,"true":60,"false":61,"NaN":62,"Infinity":63,"quotedstring":64,"emptylist":65,"EmptyString":66,"QuotedString":67,"QuotedStringEscape":68,"nonemptyexpressions":69,",":70,"identifiers":71,"nonemptyidentifiers":72,"Identifier":73,"{":74,"}":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"function",18:";",20:"return",21:"break",22:"continue",24:"=",25:"const",26:"let",27:"if",28:"(",29:")",30:"else",31:"while",32:"for",35:"+",36:"-",37:"*",38:"/",39:"%",40:"!",41:"&&",42:"||",43:"===",44:"!==",45:">",46:"<",47:">=",48:"<=",49:"=>",51:"[",52:"]",56:"?",57:":",58:"FLOAT_NUMBER",59:"INT_NUMBER",60:"true",61:"false",62:"NaN",63:"Infinity",65:"emptylist",66:"EmptyString",67:"QuotedString",68:"QuotedStringEscape",70:",",73:"Identifier",74:"{",75:"}"},
productions_: [0,[3,2],[4,0],[4,2],[7,2],[6,1],[6,1],[6,1],[6,5],[6,1],[6,3],[6,2],[6,2],[6,3],[6,2],[6,2],[16,5],[23,1],[23,1],[17,3],[10,11],[10,9],[11,7],[12,10],[33,1],[33,2],[34,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,5],[19,2],[19,4],[19,4],[19,1],[19,1],[19,3],[19,1],[19,2],[19,5],[55,3],[55,4],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[64,1],[64,1],[64,1],[64,2],[64,2],[54,1],[54,0],[69,3],[69,1],[50,2],[13,3],[71,1],[71,0],[72,3],[72,1],[9,1],[14,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 counter = 0; return $$[$0-1]; 
break;
case 2: case 70:
 this.$ = ""; 
break;
case 3:
 this.$ = $$[$0-1] + "\n" + $$[$0]; 
break;
case 4:

  	this.$ = getNewName($$[$0][0]);
  
break;
case 8:

      popStack();
      this.$ = "function " + $$[$0-4] + "(" + $$[$0-3] + ") {" + $$[$0-1] + "}" ;
    
break;
case 10:

      this.$ = "{" + $$[$0-1] + "}";
        
break;
case 11: case 12:

      this.$ = $$[$0-1] + ";";
        
break;
case 13:

      this.$ = "return " + $$[$0-1] + ";";
        
break;
case 14:

      this.$ = "break;";
    
break;
case 15:

      this.$ = "continue;";
    
break;
case 16:

      var newName = getNewName($$[$0-3][0]);
      this.$ = "var " + newName + "=" + $$[$0-1] + ";";
    
break;
case 19:

      this.$ = $$[$0-2] + "=" + $$[$0];
    
break;
case 20:

      this.$ = "if (" + $$[$0-8] + ") {" + $$[$0-5] + "} else {" + $$[$0-1] + "}";
    
break;
case 21:

      this.$ = "if (" + $$[$0-6] + ") {" + $$[$0-3] + "} else " + $$[$0];
    
break;
case 22:

      this.$ = "while (" + $$[$0-4] + ") {" + $$[$0-1] + "}";
    
break;
case 23:

      this.$ = "for (" + $$[$0-7] + $$[$0-6] + ";" + $$[$0-4] + ") {" + $$[$0-1] + "}";
    
break;
case 25:

      this.$ = $$[$0-1] + ";";
    
break;
case 27:

      this.$ = $$[$0-2] + "+" + $$[$0];
    
break;
case 28:

      this.$ = $$[$0-2] + "-" + $$[$0];
    
break;
case 29:

      this.$ = $$[$0-2] + "*" + $$[$0];
    
break;
case 30:

      this.$ = $$[$0-2] + "/" + $$[$0];
    
break;
case 31:

      this.$ = $$[$0-2] + "%" + $$[$0];
    
break;
case 32:

      this.$ = "-" + $$[$0];
    
break;
case 33:

      this.$ = "+" + $$[$0];
    
break;
case 34:

      this.$ = "!" + $$[$0];
    
break;
case 35:

      this.$ = $$[$0-2] + "&&" + $$[$0];
    
break;
case 36:

      this.$ = $$[$0-2] + "||" + $$[$0];
    
break;
case 37:

      this.$ = $$[$0-2] + "===" + $$[$0];
    
break;
case 38:

      this.$ = $$[$0-2] + "!==" + $$[$0];
    
break;
case 39:

      this.$ = $$[$0-2] + ">" + $$[$0];
    
break;
case 40:

      this.$ = $$[$0-2] + "<" + $$[$0];
    
break;
case 41:

      this.$ = $$[$0-2] + ">=" + $$[$0];
    
break;
case 42:

      this.$ = $$[$0-2] + "<=" + $$[$0];
    
break;
case 43:

      popStack();
      this.$ = "(function(" + $$[$0-2] + "){ return " + $$[$0] + ";})";
    
break;
case 44:

      popStack();
      this.$ = "(function(" + $$[$0-4] + "){ " + $$[$0-1] + "})";
    
break;
case 45:

      popStack();
      this.$ = "(function(" + $$[$0-1] + "){ return " + $$[$0] + ";})";
    
break;
case 46:

	  popStack();
	  this.$ = "(function(" + $$[$0-3] + "){ " + $$[$0-1] + "})";
	
break;
case 47:

      this.$ = $$[$0-3] + "[" + $$[$0-1] + "]"
    
break;
case 48: case 69: case 72: case 75:
 this.$ = $$[$0]; 
break;
case 49:
 this.$ = $$[$0][1]; 
break;
case 50:

      this.$ = "[" + $$[$0-1] + "]";
    
break;
case 52:
 this.$ = $$[$0-1][1] + $$[$0]
break;
case 53:

      this.$ = $$[$0-4] + "?" + $$[$0-2] + ":" + $$[$0];
    
break;
case 54:
 this.$ = "(" + $$[$0-1] + ")"; 
break;
case 55:
 this.$ = "(" + $$[$0-2] + ")" + $$[$0]; 
break;
case 56:
 this.$ = String(parseFloat(yytext)); 
break;
case 57:
 this.$ = String(parseInt(yytext, 10)); 
break;
case 58:
 this.$ = 'true'; 
break;
case 59:
 this.$ = 'false'; 
break;
case 60:
 this.$ = 'NaN'; 
break;
case 61:
 this.$ = 'Infinity'; 
break;
case 62:
 this.$ = '"' + $$[$0].replace(/\"/g,'\\\"') + '"'; 
break;
case 63:
 this.$ = 'null'; 
break;
case 64:

    this.$ = '';
  
break;
case 66:

    switch (yytext)
    {
      case 'b':   this.$ = '\\b'; break;
      case 'n':   this.$ = '\\n'; break;
      case 'r':   this.$ = '\\r'; break;
      case 't':   this.$ = '\\t'; break;
      case "'":   this.$ = "\\'"; break;
      case '"':   this.$ = '\\"'; break;
      case '\\':    this.$ = '\\\\'; break;
      case '\n':
      case '\r\n':  this.$ = ''; break;
      default:    this.$ = '\\\\' + $$[$0]; break;
    }
  
break;
case 67:

    switch ($$[$0-1])
    {
      case 'b':   this.$ = '\\b'; break;
      case 'n':   this.$ = '\\n'; break;
      case 'r':   this.$ = '\\r'; break;
      case 't':   this.$ = '\\t'; break;
      case "'":   this.$ = "\\'"; break;
      case '"':   this.$ = '\\"'; break;
      case '\\':    this.$ = '\\\\'; break;
      case '\n':
      case '\r\n':  this.$ = ''; break;
      default:    this.$ = '\\\\' + $$[$0-1]; break;
    }
    this.$ += $$[$0];
  
break;
case 68:

    this.$ = $$[$0-1] + $$[$0];
  
break;
case 71:
 this.$ = $$[$0-2] + "," + $$[$0]; 
break;
case 73:

  	pushStack();
  	this.$ = getNewName($$[$0-1][0]);
  
break;
case 74:

  	pushStack();
  	var renamed = [];
  	for (var i = 0; i < $$[$0-1].length; i++) {
  		renamed.push(getNewName($$[$0-1][i]));
  	}
  	this.$ = renamed.join(", ");
  
break;
case 76:
 this.$ = []; 
break;
case 77:
 this.$ = [$$[$0-2][0]].concat($$[$0]); 
break;
case 78:
 this.$ = [$$[$0][0]]; 
break;
case 79:

      var id = yytext;
      var renamed = getRenamedVarIfPossible(id);
      this.$ = [id, renamed];
    
break;
case 80:

  	pushStack();
  
break;
case 81:

  	popStack();
  
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq},{1:[3]},{5:[1,45]},o($Vr,$V0,{6:3,10:4,11:5,12:6,7:7,16:8,14:9,17:10,19:11,23:19,13:24,50:25,53:26,9:27,55:29,64:39,4:46,8:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,51:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq}),o($Vs,[2,5]),o($Vs,[2,6]),o($Vs,[2,7]),{13:47,28:[1,48]},o($Vs,[2,9]),{4:49,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},{18:[1,50]},{18:[1,51],24:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},{9:27,13:24,19:68,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{18:[1,69]},{18:[1,70]},{28:[1,71]},{28:[1,72]},{28:[1,73]},{9:74,73:$Vp},{9:75,73:$Vp},o([8,20,21,22,25,26,27,28,31,32,35,36,40,51,58,59,60,61,62,63,65,66,67,68,73,74,75],[2,80]),{9:27,13:24,19:76,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:77,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:78,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{49:[1,79]},{9:27,13:24,14:81,19:80,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq},o($VJ,[2,48]),o($VJ,[2,49],{55:82,28:$VK,49:$VL}),{9:27,13:24,19:87,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,52:$VM,53:26,54:85,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:86,73:$Vp},o($VJ,[2,51]),{73:[2,17]},{73:[2,18]},{9:91,13:24,19:87,28:$V8,29:$VN,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,54:89,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:86,71:88,72:90,73:$Vp},o($VJ,[2,56]),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,63]),o([18,24,28,29,35,36,37,38,39,41,42,43,44,45,46,47,48,49,51,52,56,57,70],[2,79]),o($VJ,[2,64]),o($VJ,[2,65],{64:92,66:$Vm,67:$Vn,68:$Vo}),o($VJ,[2,66],{64:93,66:$Vm,67:$Vn,68:$Vo}),{1:[2,1]},o($Vr,[2,3]),{14:94,74:$Vq},{9:95,29:$VN,71:88,72:90,73:$Vp},{15:96,75:$VO},o($Vs,[2,11]),o($Vs,[2,12]),{9:27,13:24,19:98,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:99,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:100,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:101,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:102,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:103,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:104,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:105,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:106,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:107,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:108,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:109,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:110,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:111,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:112,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:113,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{18:[1,114],35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},o($Vs,[2,14]),o($Vs,[2,15]),{9:27,13:24,19:115,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,19:116,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{9:27,13:24,16:118,17:119,19:120,23:19,25:$V5,26:$V6,28:$V8,33:117,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{28:[2,4]},{24:[1,121]},o($VP,[2,32],{51:$VH}),o($VP,[2,33],{51:$VH}),o($VP,[2,34],{51:$VH}),{9:27,13:24,14:123,19:122,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq},o($VQ,[2,45],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI}),{4:124,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},o($VJ,[2,52]),o([28,35,36,40,51,58,59,60,61,62,63,65,66,67,68,73,74],[2,73]),{9:27,13:24,19:87,28:$V8,29:$VM,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,54:89,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:86,73:$Vp},{52:[1,125]},o($VR,[2,69]),o($VR,[2,72],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI,70:[1,126]}),{29:[1,127]},{29:[1,128]},{29:[2,75]},o([29,35,36,37,38,39,41,42,43,44,45,46,47,48,51,56],$VS,{55:82,28:$VK,49:$VL,70:$VT}),o($VJ,[2,68]),o($VJ,[2,67]),{4:130,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},{29:$VS,70:$VT},o($Vs,[2,10]),o([5,8,18,20,21,22,24,25,26,27,28,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,56,57,58,59,60,61,62,63,65,66,67,68,70,73,74,75],[2,81]),o([18,29],[2,19],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI}),o($VU,[2,27],{37:$Vw,38:$Vx,39:$Vy,51:$VH}),o($VU,[2,28],{37:$Vw,38:$Vx,39:$Vy,51:$VH}),o($VP,[2,29],{51:$VH}),o($VP,[2,30],{51:$VH}),o($VP,[2,31],{51:$VH}),o([18,24,29,41,42,52,56,57,70],[2,35],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH}),o([18,24,29,42,52,56,57,70],[2,36],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH}),o($VV,[2,37],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH}),o($VV,[2,38],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH}),o($VW,[2,39],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,51:$VH}),o($VW,[2,40],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,51:$VH}),o($VW,[2,41],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,51:$VH}),o($VW,[2,42],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,51:$VH}),{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,52:[1,131],56:$VI},{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI,57:[1,132]},o($Vs,[2,13]),{29:[1,133],35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},{29:[1,134],35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},{9:27,13:24,19:135,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},o($VX,[2,24]),{18:[1,136]},{24:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},{9:27,13:24,19:137,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},o($VQ,[2,43],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI}),{4:138,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},{15:139,75:$VO},o($VJ,[2,50]),{9:27,13:24,19:87,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:140,73:$Vp},o([49,74],[2,74]),o($VJ,[2,54],{55:141,28:$VK}),{9:95,72:142,73:$Vp},{15:143,75:$VO},o($VJ,[2,47]),{9:27,13:24,19:144,28:$V8,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},{14:145,74:$Vq},{14:146,74:$Vq},{18:[1,147],35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},o($VX,[2,25]),{18:[1,148],35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI},{15:149,75:$VO},o($VJ,[2,46]),o($VR,[2,71]),o($VJ,[2,55]),{29:[2,77]},o($Vs,[2,8]),o($VQ,[2,53],{35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,51:$VH,56:$VI}),{4:150,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},{4:151,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},{9:27,13:24,17:153,19:120,28:$V8,34:152,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp},o($Vs,[2,16]),o($VJ,[2,44]),{15:154,75:$VO},{15:155,75:$VO},{29:[1,156]},{29:[2,26]},{30:[1,157]},o($Vs,[2,22]),{14:158,74:$Vq},{10:160,14:159,27:$V7,74:$Vq},{4:161,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},{4:162,6:3,7:7,8:$V1,9:27,10:4,11:5,12:6,13:24,14:9,16:8,17:10,19:11,20:$V2,21:$V3,22:$V4,23:19,25:$V5,26:$V6,27:$V7,28:$V8,31:$V9,32:$Va,35:$Vb,36:$Vc,40:$Vd,50:25,51:$Ve,53:26,55:29,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:39,65:$Vl,66:$Vm,67:$Vn,68:$Vo,73:$Vp,74:$Vq,75:$V0},o($Vs,[2,21]),{15:163,75:$VO},{15:164,75:$VO},o($Vs,[2,23]),o($Vs,[2,20])],
defaultActions: {30:[2,17],31:[2,18],45:[2,1],74:[2,4],90:[2,75],142:[2,77],153:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var counter = 0;
  var stack = [{}];
  function getRenamedVarIfPossible(id) {
  	for (var i = stack.length - 1; i >= 0; i--) {
  		if (stack[i].hasOwnProperty(id)) {
  			return stack[i][id];
  		}
  	}
  	return id;
  }
  function getNewName(id) {
    const newName = id + "$" + counter
    stack[stack.length - 1][id] = newName;
    counter++;
    return newName;
  }
  function pushStack() {
  	stack.push({});
  }
  function popStack() {
  	stack.pop();
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip single-line comments */
break;
case 1:/* skip multi-line comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 8
break;
case 4:return 20
break;
case 5:return 27
break;
case 6:return 30
break;
case 7:return 31
break;
case 8:return 32
break;
case 9:return 21
break;
case 10:return 22
break;
case 11:return 26
break;
case 12:return 25
break;
case 13:return 43
break;
case 14:return 49
break;
case 15:return 24
break;
case 16:return 74
break;
case 17:return 75
break;
case 18:return 18
break;
case 19:return 70
break;
case 20:return 60
break;
case 21:return 61
break;
case 22:return 62
break;
case 23:return 63
break;
case 24:return 65
break;
case 25:return 51
break;
case 26:return 52
break;
case 27:return 66
break;
case 28:return 66
break;
case 29:this.begin('DoubleQuotedString');
break;
case 30:this.begin('SingleQuotedString');
break;
case 31:this.begin('QuotedStringEscape');
break;
case 32:this.popState();
break;
case 33:this.popState();
break;
case 34: this.popState(); return 68; 
break;
case 35:return 67;
break;
case 36:return 67;
break;
case 37:return 73 /* TODO: non-ASCII identifiers */
break;
case 38:return 58 /* 3.1, 3.1e-7 */
break;
case 39:return 59
break;
case 40:return 35
break;
case 41:return 36
break;
case 42:return 37
break;
case 43:return 38
break;
case 44:return 39
break;
case 45:return 44
break;
case 46:return 48
break;
case 47:return 47
break;
case 48:return 46
break;
case 49:return 45
break;
case 50:return 40
break;
case 51:return 41
break;
case 52:return 42
break;
case 53:return 28
break;
case 54:return 29
break;
case 55:return 56
break;
case 56:return 57
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/([^\n\r]*))/,/^(?:\/\*([\u0000-\uffff]*?)\*\/)/,/^(?:\s+)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:===)/,/^(?:=>)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:NaN\b)/,/^(?:Infinity\b)/,/^(?:null\b)/,/^(?:\[)/,/^(?:\])/,/^(?:"")/,/^(?:'')/,/^(?:")/,/^(?:')/,/^(?:\\)/,/^(?:")/,/^(?:')/,/^(?:(.|\r\n|\n))/,/^(?:[^"\\]*)/,/^(?:[^'\\]*)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?([eE][\-+]?[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"QuotedStringEscape":{"rules":[34],"inclusive":false},"SingleQuotedString":{"rules":[31,33,36],"inclusive":false},"DoubleQuotedString":{"rules":[31,32,35],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}